// lib/providers/nightlight_provider.dart
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../core/models/nightlight_settings.dart';
import '../core/services/camera_service.dart';
import '../ui/theme/app_color_schemes.dart';

class NightlightProvider with ChangeNotifier {
  CameraService? _cameraService;
  NightlightSettings _settings = const NightlightSettings();
  
  // Getters publics
  NightlightSettings get settings => _settings;
  bool get isEnabled => _settings.enabled;
  String get currentColor => _settings.color;
  int get intensity => _settings.intensity;
  
  // Getter pour les couleurs disponibles
  Map<String, List<Color>> get availableColors => AppColorSchemes.nightlightColors;

  /// Initialise le provider avec l'URL de base de la cam√©ra
  void initialize(String baseUrl) {
    _cameraService = CameraService(baseUrl: baseUrl);
    _loadSettings();
    debugPrint('üåô NightlightProvider initialis√© avec baseUrl: $baseUrl');
  }

  /// Charge les param√®tres sauvegard√©s
  Future<void> _loadSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final settingsJson = prefs.getString('nightlight_settings_v2');
      
      if (settingsJson != null) {
        final Map<String, dynamic> json = 
            Map<String, dynamic>.from(jsonDecode(settingsJson));
        _settings = NightlightSettings.fromJson(json);
        debugPrint('üåô Param√®tres veilleuse charg√©s: ${_settings.toJson()}');
      } else {
        debugPrint('üåô Aucun param√®tre veilleuse sauvegard√©, utilisation des d√©fauts');
      }
      
      notifyListeners();
    } catch (e) {
      debugPrint('‚ùå Erreur lors du chargement des param√®tres veilleuse: $e');
    }
  }

  /// Sauvegarde les param√®tres
  Future<void> _saveSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('nightlight_settings_v2', jsonEncode(_settings.toJson()));
      debugPrint('üíæ Param√®tres veilleuse sauvegard√©s');
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la sauvegarde des param√®tres veilleuse: $e');
    }
  }

  /// Active/d√©sactive la veilleuse (toggle simple)
  Future<void> toggle() async {
    final wasEnabled = _settings.enabled;
    _settings = _settings.copyWith(enabled: !_settings.enabled);
    
    debugPrint('üåô Toggle veilleuse: $wasEnabled ‚Üí ${_settings.enabled}');
    
    await _applySettings();
    notifyListeners();
  }

  /// Met √† jour les param√®tres de la veilleuse
  Future<void> updateSettings({
    String? color,
    int? intensity,
    bool? enabled,
    DateTime? scheduledOff,
  }) async {
    final oldSettings = _settings;
    
    _settings = _settings.copyWith(
      color: color,
      intensity: intensity,
      enabled: enabled,
      scheduledOff: scheduledOff,
    );
    
    debugPrint('üåô Mise √† jour param√®tres veilleuse:');
    debugPrint('   Couleur: ${oldSettings.color} ‚Üí ${_settings.color}');
    debugPrint('   Intensit√©: ${oldSettings.intensity} ‚Üí ${_settings.intensity}');
    debugPrint('   Activ√©e: ${oldSettings.enabled} ‚Üí ${_settings.enabled}');
    
    await _applySettings();
    notifyListeners();
  }

  /// Active la veilleuse avec des param√®tres sp√©cifiques
  Future<void> activateWithSettings({
    required String color,
    required int intensity,
  }) async {
    await updateSettings(
      color: color,
      intensity: intensity,
      enabled: true,
    );
  }

  /// D√©sactive la veilleuse
  Future<void> deactivate() async {
    await updateSettings(enabled: false);
  }

  /// Programme l'extinction automatique
  Future<void> scheduleOff(DateTime scheduledTime) async {
    await updateSettings(scheduledOff: scheduledTime);
    
    // Calculer le d√©lai
    final delay = scheduledTime.difference(DateTime.now());
    if (delay.isNegative) {
      debugPrint('‚ö†Ô∏è Heure programm√©e dans le pass√©, extinction imm√©diate');
      await deactivate();
      return;
    }
    
    debugPrint('‚è∞ Veilleuse programm√©e pour s\'√©teindre dans ${delay.inMinutes} minutes');
    
    // Programmer l'extinction (simple - dans une vraie app, utiliser un service de background)
    Future.delayed(delay, () {
      if (_settings.scheduledOff == scheduledTime) {
        deactivate();
        debugPrint('‚è∞ Extinction automatique de la veilleuse');
      }
    });
  }

  /// Annule l'extinction programm√©e
  Future<void> cancelScheduledOff() async {
    await updateSettings(scheduledOff: null);
    debugPrint('‚ùå Extinction programm√©e annul√©e');
  }

  /// Applique les param√®tres sur la cam√©ra
  Future<void> _applySettings() async {
    try {
      if (_cameraService != null) {
        // Si d√©sactiv√©e, envoyer intensit√© 0
        final effectiveIntensity = _settings.enabled ? _settings.intensity : 0;
        
        // Appeler la m√©thode du service cam√©ra
        await _cameraService!.toggleNightLight(_settings.enabled, effectiveIntensity);
        
        debugPrint('‚úÖ Param√®tres veilleuse appliqu√©s sur la cam√©ra');
      } else {
        debugPrint('‚ö†Ô∏è Service cam√©ra non initialis√©, param√®tres non appliqu√©s');
      }
      
      // Sauvegarder dans tous les cas
      await _saveSettings();
      
    } catch (e) {
      debugPrint('‚ùå Erreur lors de l\'application des param√®tres veilleuse: $e');
      // En cas d'erreur r√©seau, on sauvegarde quand m√™me localement
      await _saveSettings();
      rethrow; // Relancer l'erreur pour que l'UI puisse l'afficher
    }
  }

  /// Obtient le nom lisible d'une couleur
  String getColorName(String colorKey) {
    const colorNames = {
      'warm': 'Blanc chaud',
      'cool': 'Bleu frais',
      'purple': 'Violet',
      'green': 'Vert',
      'pink': 'Rose',
      'blue': 'Bleu',
      'orange': 'Orange',
      'white': 'Blanc pur',
    };
    return colorNames[colorKey] ?? colorKey;
  }

  /// Obtient la description d'une couleur
  String getColorDescription(String colorKey) {
    const colorDescriptions = {
      'warm': 'Id√©al pour l\'endormissement',
      'cool': 'Apaisant et relaxant',
      'purple': 'Mystique et doux',
      'green': 'Naturel et reposant',
      'pink': 'Tendre et r√©confortant',
      'blue': 'Calme et serein',
      'orange': 'Chaleureux et √©nergisant',
      'white': 'Neutre et fonctionnel',
    };
    return colorDescriptions[colorKey] ?? 'Couleur personnalis√©e';
  }

  /// Obtient l'ic√¥ne recommand√©e pour une couleur
  IconData getColorIcon(String colorKey) {
    const colorIcons = {
      'warm': Icons.wb_incandescent,
      'cool': Icons.ac_unit,
      'purple': Icons.auto_awesome,
      'green': Icons.park,
      'pink': Icons.favorite,
      'blue': Icons.water_drop,
      'orange': Icons.wb_sunny,
      'white': Icons.lightbulb,
    };
    return colorIcons[colorKey] ?? Icons.lightbulb;
  }

  /// V√©rifie si une couleur est disponible
  bool isColorAvailable(String colorKey) {
    return AppColorSchemes.nightlightColors.containsKey(colorKey);
  }

  /// Obtient la liste des couleurs disponibles
  List<String> get availableColorKeys => AppColorSchemes.nightlightColors.keys.toList();

  /// Obtient les couleurs Flutter pour une cl√© de couleur
  List<Color> getFlutterColors(String colorKey) {
    return AppColorSchemes.nightlightColors[colorKey] ?? [Colors.white, Colors.grey];
  }

  /// R√©initialise aux param√®tres par d√©faut
  Future<void> resetToDefaults() async {
    debugPrint('üîÑ R√©initialisation des param√®tres veilleuse');
    
    _settings = const NightlightSettings();
    await _applySettings();
    notifyListeners();
  }

  /// Obtient un r√©sum√© des param√®tres actuels
  String get settingsSummary {
    if (!_settings.enabled) {
      return 'Veilleuse √©teinte';
    }
    
    final colorName = getColorName(_settings.color);
    return '$colorName √† ${_settings.intensity}%';
  }

  /// V√©rifie si l'extinction est programm√©e
  bool get hasScheduledOff => _settings.scheduledOff != null;

  /// Obtient le temps restant avant extinction (si programm√©e)
  Duration? get timeUntilOff {
    if (_settings.scheduledOff == null) return null;
    
    final diff = _settings.scheduledOff!.difference(DateTime.now());
    return diff.isNegative ? null : diff;
  }

  /// M√©thode de debug pour afficher l'√©tat
  void debugPrintState() {
    debugPrint('üåô √âtat NightlightProvider:');
    debugPrint('   Activ√©e: ${_settings.enabled}');
    debugPrint('   Couleur: ${_settings.color} (${getColorName(_settings.color)})');
    debugPrint('   Intensit√©: ${_settings.intensity}%');
    debugPrint('   Extinction programm√©e: ${_settings.scheduledOff}');
    debugPrint('   Service cam√©ra: ${_cameraService != null ? 'OK' : 'Non initialis√©'}');
  }

  @override
  void dispose() {
    debugPrint('üåô NightlightProvider dispose');
    super.dispose();
  }
}